{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4adf8939",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "db0e1dee",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import scipy.stats as st\n",
    "from scipy.stats import linregress"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "107b3f93",
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook widget"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d92a61f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "rent_file = pd.read_csv(\"price.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "41c34c5b",
   "metadata": {},
   "outputs": [],
   "source": [
    "rent_file = pd.read_csv(\"price.csv\")\n",
    "\n",
    "rent_pd = pd.DataFrame(rent_file)\n",
    "\n",
    "rent_pd.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5db517e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating a path to the file and hjhjhmaking it into a dataframe\n",
    "rent_file = pd.read_csv(\"price.csv\")\n",
    "\n",
    "rent_df = pd.DataFrame(rent_file)\n",
    "\n",
    "rent_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8e2aa883",
   "metadata": {},
   "outputs": [],
   "source": [
    "rent_df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3189d883",
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook widget"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a54f507d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import scipy.stats as st\n",
    "from scipy.stats import linregress"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0fa50ccd",
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook widget"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f1881b78",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating a path to the file making it into a dataframe\n",
    "rent_file = pd.read_csv(\"price.csv\")\n",
    "\n",
    "rent_df = pd.DataFrame(rent_file)\n",
    "\n",
    "rent_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "23fe0752",
   "metadata": {},
   "outputs": [],
   "source": [
    "rent_df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "a62aef0d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import scipy.stats as st\n",
    "from scipy.stats import linregress"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1d7604fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook widget"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f3d6326b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating a path to the file making it into a dataframe\n",
    "rent_file = pd.read_csv(\"price.csv\")\n",
    "\n",
    "rent_df = pd.DataFrame(rent_file)\n",
    "\n",
    "rent_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "570a2410",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import scipy.stats as st\n",
    "from scipy.stats import linregress"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "54ae017b",
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook widget"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "20bb4b3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating a path to the file making it into a dataframe\n",
    "rent_file = pd.read_csv(\"price.csv\")\n",
    "\n",
    "rent_df = pd.DataFrame(rent_file)\n",
    "\n",
    "rent_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "69ee02c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating a path to the file making it into a dataframe\n",
    "rent_file = pd.read_csv(\"price.csv\")\n",
    "\n",
    "rent_df = pd.DataFrame(rent_file)\n",
    "\n",
    "rent_df.head()10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "4c19f11d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import scipy.stats as st\n",
    "from scipy.stats import linregress"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "f07f7c3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook widget"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "d77ce4b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating a path to the file making it into a dataframe\n",
    "rent_file = pd.read_csv(\"price.csv\")\n",
    "\n",
    "rent_df = pd.DataFrame(rent_file)\n",
    "\n",
    "rent_df.head()10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "24aacf73",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating a path to the file making it into a dataframe\n",
    "rent_file = pd.read_csv(\"price.csv\")\n",
    "\n",
    "rent_df = pd.DataFrame(rent_file)\n",
    "\n",
    "rent_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "37a32b2f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating a path to the file making it into a dataframe\n",
    "rent_file = pd.read_csv(\"price.csv\")\n",
    "\n",
    "rent_df = pd.DataFrame(rent_file)\n",
    "\n",
    "rent_df.head()10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "6a54f672",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating a path to the file making it into a dataframe\n",
    "rent_file = pd.read_csv(\"price.csv\")\n",
    "\n",
    "rent_df = pd.DataFrame(rent_file)\n",
    "\n",
    "rent_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "cbb0dad5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Extracting states from data (CA, IL, NY, TX)\n",
    "four_states_df = rent_df.drop(rent_df[rent_df['State'] != \"New York\" or \"California\" or \"Illinois\" or \"Texas\"])\n",
    "\n",
    "four_states_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "236c299b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Extracting states from data (CA, IL, NY, TX)\n",
    "four_states_df = rent_df.drop(rent_df[rent_df['State'] != \"New York\"])\n",
    "\n",
    "four_states_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "22f680cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Extracting states from data (CA, IL, NY, TX)\n",
    "four_states_df = rent_df.drop(rent_df.iloc[rent_df['State'] != \"New York\"])\n",
    "\n",
    "four_states_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "e8996ccc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Extracting states from data (CA, IL, NY, TX)\n",
    "four_states_df = rent_df.iloc(rent_df[rent_df['State'] != \"New York\"])\n",
    "\n",
    "four_states_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "815d8eb7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Extracting states from data (CA, IL, NY, TX)\n",
    "four_states_df = rent_df.loc(rent_df[rent_df['State'] != \"New York\"])\n",
    "\n",
    "four_states_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "78a634a0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Extracting states from data (CA, IL, NY, TX)\n",
    "four_states_df = rent_df.drop(rent_df[rent_df['State'] != \"New York\"])\n",
    "\n",
    "four_states_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "aba0b8b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Extracting states from data (CA, IL, NY, TX)\n",
    "four_states_df = rent_df.drop(rent_df[rent_df['State'] != \"NY\"])\n",
    "\n",
    "four_states_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "3d885bac",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example assuming the 'Location_State' column exists\n",
    "four_states_df = rent_df.drop(rent_df[rent_df['Location_State'] != \"New York\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "41a68344",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example assuming the 'Location_State' column exists\n",
    "new_york_df = rent_df[rent_df['State'] == 'New York']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "b4346325",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example assuming the 'Location_State' column exists\n",
    "new_york_df = rent_df[rent_df['State'] == 'New York']\n",
    "new_york_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "7fc2c4ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Example assuming the 'Location_State' column exists\n",
    "new_york_df = rent_df[rent_df['State'] == 'New York']\n",
    "new_york_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "b9583ed0",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load your DataFrame (replace 'your_data.csv' with your actual data file)\n",
    "rent_df = pd.read_csv('your_data.csv')\n",
    "\n",
    "# List of column names to drop\n",
    "columns_to_drop = ['City Code', 'City', 'Metro', 'County']\n",
    "\n",
    "# Drop the specified columns\n",
    "filtered_df = rent_df.drop(columns=columns_to_drop)\n",
    "\n",
    "# Display the first few rows of the filtered DataFrame\n",
    "print(filtered_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "e56f98d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load your DataFrame (replace 'your_data.csv' with your actual data file)\n",
    "rent_df = pd.read_csv('price.csv')\n",
    "\n",
    "# List of column names to drop\n",
    "columns_to_drop = ['City Code', 'City', 'Metro', 'County']\n",
    "\n",
    "# Drop the specified columns\n",
    "filtered_df = rent_df.drop(columns=columns_to_drop)\n",
    "\n",
    "# Display the first few rows of the filtered DataFrame\n",
    "print(filtered_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "7850f92f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Extracting states from data (CA, IL, NY, TX)\n",
    "four_states = [\"NY\", \"CA\", \"IL\", \"TX\"]\n",
    "\n",
    "four_states_df = rent_df.isin(rent_df[rent_df[four_states]])\n",
    "\n",
    "four_states_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "34a587e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load your DataFrame (replace 'your_data.csv' with your actual data file)\n",
    "rent_df = pd.read_csv('price.csv')\n",
    "\n",
    "# List of column names to drop\n",
    "columns_to_drop = []\n",
    "\n",
    "# Drop the specified columns\n",
    "filtered_df = rent_df.drop(columns=columns_to_drop)\n",
    "\n",
    "# Display the first few rows of the filtered DataFrame\n",
    "print(filtered_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "d33e4bef",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Load your DataFrame (replace 'your_data.csv' with your actual data file)\n",
    "rent_df = pd.read_csv('price.csv')\n",
    "\n",
    "# List of column names to drop\n",
    "columns_to_drop\n",
    "\n",
    "# Drop the specified columns\n",
    "filtered_df = rent_df.drop(columns=columns_to_drop)\n",
    "\n",
    "# Display the first few rows of the filtered DataFrame\n",
    "print(filtered_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "a1a3e829",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Extracting states from data (CA, IL, NY, TX)\n",
    "four_states = [\"NY\", \"CA\", \"IL\", \"TX\"]\n",
    "\n",
    "four_states_df = rent_df[rent_df['State'].isin(four_states)]\n",
    "# clean=df[df['Mouse ID']!='g989']\n",
    "four_states_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "a43bca15",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import scipy.stats as st\n",
    "from scipy.stats import linregress"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "3667c645",
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook widget"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "3440d834",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating a path to the file making it into a dataframe\n",
    "rent_file = pd.read_csv(\"price.csv\")\n",
    "\n",
    "rent_df = pd.DataFrame(rent_file)\n",
    "\n",
    "rent_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "6f98d763",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Identifying what columns are missing data\n",
    "rent_df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "950d6610",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Extracting states from data (CA, IL, NY, TX)\n",
    "four_states = [\"NY\", \"CA\", \"IL\", \"TX\"]\n",
    "\n",
    "four_states_df = rent_df[rent_df['State'].isin(four_states)]\n",
    "\n",
    "four_states_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "954fa164",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "# Load your DataFrame (replace 'your_data.csv' with your actual data file)\n",
    "rent_df = pd.read_csv('price.csv')\n",
    "\n",
    "# List of column names to drop\n",
    "columns_to_drop\n",
    "\n",
    "# Drop the specified columns\n",
    "filtered_df = rent_df.drop(columns=columns_to_drop)\n",
    "\n",
    "# Display the first few rows of the filtered DataFrame\n",
    "print(filtered_df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "0621954a",
   "metadata": {},
   "outputs": [],
   "source": [
    "NY_states = [\"NY\"]\n",
    "\n",
    "NY_states_df = rent_df[rent_df['State'].isin(NY_states)]\n",
    "\n",
    "NY_states_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "de89fb6a",
   "metadata": {},
   "outputs": [],
   "source": [
    "NY_states = [\"NY\"]\n",
    "\n",
    "NY_states_df = rent_df[rent_df['State'].isin['NY']]\n",
    "\n",
    "NY_states_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "b408b18c",
   "metadata": {},
   "outputs": [],
   "source": [
    "NY_states = [\"NY\"]\n",
    "\n",
    "NY_states_df = rent_df[rent_df['State'].isin[\"NY\"]]\n",
    "\n",
    "NY_states_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "62d04563",
   "metadata": {},
   "outputs": [],
   "source": [
    "NY_states = [\"NY\"]\n",
    "\n",
    "NY_states_df = rent_df[rent_df['State'].isin[NY_state]]\n",
    "\n",
    "NY_states_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "10b351bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "NY_states = [\"NY\"]\n",
    "\n",
    "NY_states_df = rent_df[rent_df['State'].isin[NY_state]\n",
    "NY_states_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "32c35b87",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "NY_states = [\"NY\"]\n",
    "\n",
    "NY_states_df = rent_df[rent_df['State'].isin(NY_states)]\n",
    "\n",
    "NY_states_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "03036935",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "NY_state = [\"NY\"]\n",
    "\n",
    "NY_state_df = rent_df[rent_df['State'].isin(NY_state)]\n",
    "\n",
    "NY_state_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "c42123d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Breaking each state into its own df\n",
    "rent_df.dropna()\n",
    "\n",
    "rent_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "e948803c",
   "metadata": {},
   "outputs": [],
   "source": [
    "CA_state = [\"CA\"]\n",
    "\n",
    "CA_state_df = rent_df[rent_df['State'].isin(CA_state)]\n",
    "\n",
    "CA_state_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "6e9829ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "IL_state = [\"IL\"]\n",
    "\n",
    "IL_state_df = rent_df[rent_df['State'].isin(IL_state)]\n",
    "\n",
    "IL_state_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "385e5486",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Breaking each state into its own df\n",
    "rent_df.dropna(how='all')\n",
    "\n",
    "rent_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "65c27f2c",
   "metadata": {},
   "outputs": [],
   "source": [
    "TX_state = [\"TX\"]\n",
    "\n",
    "TX_state_df = rent_df[rent_df['State'].isin(TX_state)]\n",
    "\n",
    "TX_state_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "691a983e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Breaking each state into its own df\n",
    "rent_df.dropna(inplace = True)\n",
    "\n",
    "rent_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "52214e64",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Droping all NaN values\n",
    "rent_df.dropna(inplace = True)\n",
    "\n",
    "rent_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "adfe8361",
   "metadata": {},
   "outputs": [],
   "source": [
    "#New York Data Frame\n",
    "NY_state = [\"NY\"]\n",
    "\n",
    "NY_state_df = rent_df[rent_df['State'].isin(NY_state)]\n",
    "\n",
    "NY_state_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "655f813d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#California Data Frame\n",
    "CA_state = [\"CA\"]\n",
    "\n",
    "CA_state_df = rent_df[rent_df['State'].isin(CA_state)]\n",
    "\n",
    "CA_state_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "41e411a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Illinois Data Frame\n",
    "IL_state = [\"IL\"]\n",
    "\n",
    "IL_state_df = rent_df[rent_df['State'].isin(IL_state)]\n",
    "\n",
    "IL_state_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "a22a26da",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Texas Data Frame\n",
    "TX_state = [\"TX\"]\n",
    "\n",
    "TX_state_df = rent_df[rent_df['State'].isin(TX_state)]\n",
    "\n",
    "TX_state_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "d17769c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import scipy.stats as st\n",
    "from scipy.stats import linregress"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "5408eb73",
   "metadata": {},
   "outputs": [],
   "source": [
    "%notebook widget"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "82810493",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Creating a path to the file making it into a dataframe\n",
    "rent_file = pd.read_csv(\"price.csv\")\n",
    "\n",
    "rent_df = pd.DataFrame(rent_file)\n",
    "\n",
    "rent_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "ad32d10e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Identifying what columns are missing data\n",
    "rent_df.isna().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "23f5d789",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Extracting states from data (CA, IL, NY, TX)\n",
    "four_states = [\"NY\", \"CA\", \"IL\", \"TX\"]\n",
    "\n",
    "four_states_df = rent_df[rent_df['State'].isin(four_states)]\n",
    "\n",
    "four_states_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "296f595f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Droping all NaN values\n",
    "rent_df.dropna(inplace = True)\n",
    "\n",
    "rent_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "8b53d1b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#New York Data Frame\n",
    "NY_state = [\"NY\"]\n",
    "\n",
    "NY_state_df = rent_df[rent_df['State'].isin(NY_state)]\n",
    "\n",
    "NY_state_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "a607b0d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#California Data Frame\n",
    "CA_state = [\"CA\"]\n",
    "\n",
    "CA_state_df = rent_df[rent_df['State'].isin(CA_state)]\n",
    "\n",
    "CA_state_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "a19935d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Illinois Data Frame\n",
    "IL_state = [\"IL\"]\n",
    "\n",
    "IL_state_df = rent_df[rent_df['State'].isin(IL_state)]\n",
    "\n",
    "IL_state_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "947f8731",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Texas Data Frame\n",
    "TX_state = [\"TX\"]\n",
    "\n",
    "TX_state_df = rent_df[rent_df['State'].isin(TX_state)]\n",
    "\n",
    "TX_state_df.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "c4ac1789",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = {\n",
    "    'Column1': [3, 5, 1, 9, 2],\n",
    "    'Column2': [7, 2, 8, 4, 6],\n",
    "    'Column3': [0, 2, 1, 4, 3]\n",
    "}\n",
    "df = TX_state_df(data)\n",
    "\n",
    "# Find the minimum and maximum values in the DataFrame\n",
    "min_values = df.min()\n",
    "max_values = df.max()\n",
    "\n",
    "print(\"Minimum values:\")\n",
    "print(min_values)\n",
    "\n",
    "print(\"\\nMaximum values:\")\n",
    "print(max_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "004addbb",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = {\n",
    "    'Column1': [3, 5, 1, 9, 2],\n",
    "    'Column2': [7, 2, 8, 4, 6],\n",
    "    'Column3': [0, 2, 1, 4, 3]\n",
    "}\n",
    "X_state_df(data)\n",
    "\n",
    "# Find the minimum and maximum values in the DataFrame\n",
    "min_values = df.min()\n",
    "max_values = df.max()\n",
    "\n",
    "print(\"Minimum values:\")\n",
    "print(min_values)\n",
    "\n",
    "print(\"\\nMaximum values:\")\n",
    "print(max_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "27923e88",
   "metadata": {},
   "outputs": [],
   "source": [
    "tx_min = TX_state_df['November 2010'].min()\n",
    "\n",
    "print(tx_min)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "455f01ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "rent_df['Date'] = pd.to_datetime(rent_df.iloc[:, 1:3].assign(DAY=1))\n",
    "\n",
    "# Filtering the DataFrame for Texas (you can skip this part if you have your TX_state_df already)\n",
    "TX_state = [\"TX\"]\n",
    "TX_state_df = NY_state_df[rent_df['State'].isin(TX_state)]\n",
    "\n",
    "# Find the minimum and maximum values in the 'Date' column\n",
    "min_date = TX_state_df['Date'].min()\n",
    "max_date = TX_state_df['Date'].max()\n",
    "\n",
    "print(\"Minimum Date:\", min_date)\n",
    "print(\"Maximum Date:\", max_date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "6433d538",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Califonia Combined Median Rents\n",
    "\n",
    "nov_2010_med_rent = "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "6d53d35f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#New York Combined Median Rents\n",
    "nov_2010_med_rent = NY_state_df[\"November 2010\"].median"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "9145f968",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Califonia Combined Median Rents\n",
    "\n",
    "nov_2010_med_rent = CA_state_df[\"November 2010\"].median\n",
    "\n",
    "print(nov_2010_med_rent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "4c581fd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#New York Combined Median Rents\n",
    "NY_nov_2010_med_rent = NY_state_df[\"November 2010\"].median\n",
    "\n",
    "print(NY_nov_2010_med_rent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "c4d15d91",
   "metadata": {},
   "outputs": [],
   "source": [
    "#TX\n",
    "#Finding the median for all TX rent prices per month/year\n",
    "\n",
    "nov_2010_med_rent = TX_state_df[\"November 2010\"].median\n",
    "nov_2010_med_rent "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "6f017f84",
   "metadata": {},
   "outputs": [],
   "source": [
    "#TX\n",
    "#Finding the median for all TX rent prices per month/year\n",
    "\n",
    "TX_nov_2010_med_rent = TX_state_df[\"November 2010\"].median\n",
    "TX_nov_2010_med_rent "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "78c0c457",
   "metadata": {},
   "outputs": [],
   "source": [
    "#New York Combined Median Rents\n",
    "NY_nov_2010_med_rent = NY_state_df[\"November 2010\"].median\n",
    "\n",
    "print(NY_nov_2010_med_rent)\n",
    "NY_nov_2010_med_rent.head"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "887dcdc7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#TX\n",
    "#Finding the median for all TX rent prices per month/year\n",
    "\n",
    "TX_nov_2010_med_rent = TX_state_df[\"November 2010\"].median\n",
    "print(TX_nov_2010_med_rent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "dc871bc2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#New York Combined Median Rents\n",
    "NY_nov_2010_med_rent = NY_state_df[\"November 2010\"].median\n",
    "\n",
    "#print(NY_nov_2010_med_rent)\n",
    "NY_nov_2010_med_rent.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "482ef6b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Califonia Combined Median Rents\n",
    "\n",
    "CA_nov_2010_med_rent = stats.median(CA_state_df[\"November 2010\"])\n",
    "\n",
    "print(CA_nov_2010_med_rent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "cb2eebc7",
   "metadata": {},
   "outputs": [],
   "source": [
    "IL_median = IL_state.median(axis = 1)\n",
    "IL_median"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "d88a93cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#New York Combined Median Rents\n",
    "NY_nov_2010_med_rent = NY_state_df[\"November 2010\"].median\n",
    "\n",
    "#print(NY_nov_2010_med_rent)\n",
    "NY_nov_2010_med_rent_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "5d6b42d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#New York Combined Median Rents\n",
    "NY_nov_2010_med_rent = NY_state_df[\"November 2010\"].median\n",
    "\n",
    "#print(NY_nov_2010_med_rent)\n",
    "NY_nov_2010_med_rent_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "c612b84a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#TX\n",
    "#Finding the median for all TX rent prices per month/year\n",
    "\n",
    "TX_nov_2010_med_rent = TX_state_df[\"November 2010\"].median\n",
    "TX_nov_2010_med_rent.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "9d8a12a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#TX\n",
    "#Finding the median for all TX rent prices per month/year\n",
    "\n",
    "TX_nov_2010_med_rent = TX_state_df[\"November 2010\"].median\n",
    "TX_nov_2010_med_rent.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "e52cacd3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#New York Combined Median Rents\n",
    "NY_nov_2010_med_rent = NY_state_df[\"November 2010\"].median\n",
    "\n",
    "#print(NY_nov_2010_med_rent)\n",
    "NY_nov_2010_med_rent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "12d0d96a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Califonia Combined Median Rents\n",
    "\n",
    "CA_nov_2010_med_rent = st.median(CA_state_df[\"November 2010\"])\n",
    "\n",
    "print(CA_nov_2010_med_rent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "3fe23a3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#New York Combined Median Rents\n",
    "NY_nov_2010_med_rent = NY_state_df[\"November 2010\"].median\n",
    "\n",
    "NY_nov_2010_med_rent.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "b499d6e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "#New York Combined Median Rents\n",
    "NY_nov_2010_med_rent = NY_state_df[\"November 2010\"].median\n",
    "\n",
    "NY_nov_2010_med_rent.column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "55a8ff9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#TX\n",
    "#Finding the median for all TX rent prices per month/year\n",
    "\n",
    "TX_nov_2010_med_rent = TX_state_df[\"November 2010\"].median\n",
    "TX_nov_2010_med_rent.show(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "8dd5ae10",
   "metadata": {},
   "outputs": [],
   "source": [
    "#New York Combined Median Rents\n",
    "NY_nov_2010_med_rent = NY_state_df[\"November 2010\"].median\n",
    "\n",
    "NY_nov_2010_med_rent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "83e00739",
   "metadata": {},
   "outputs": [],
   "source": [
    "#TX\n",
    "#Finding the median for all TX rent prices per month/year\n",
    "\n",
    "TX_nov_2010_med_rent = TX_state_df[\"November 2010\"].median\n",
    "TX_nov_2010_med_rent.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "a6650b2b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Califonia Combined Median Rents\n",
    "\n",
    "CA_nov_2010_med_rent = np.median(CA_state_df[\"November 2010\"])\n",
    "\n",
    "print(CA_nov_2010_med_rent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "23f633b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "NY_state_df\n",
    "\n",
    "# Calculate and print the median for each column using a for loop\n",
    "for column in NY_state_df:\n",
    "    median_value = df[column].median()\n",
    "    print(f\"Median of {column}: {median_value}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "5bf44583",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "NY_state_df\n",
    "\n",
    "# Calculate and print the median for each column using a for loop\n",
    "for column in NY_state_df:\n",
    "    median_value = NY_state_df[column].median()\n",
    "    print(f\"Median of {column}: {median_value}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "fdb40ae0",
   "metadata": {},
   "outputs": [],
   "source": [
    "median_dict = {}\n",
    "\n",
    "for column in NY_state_df:\n",
    "    median_value = df[column].median()\n",
    "    median_dict[column] = median_value\n",
    "\n",
    "print(median_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "f7bffd77",
   "metadata": {},
   "outputs": [],
   "source": [
    "median_dict = {}\n",
    "\n",
    "for column in NY_state_df:\n",
    "    median_value = NY_state_df[column].median()\n",
    "    median_dict[column] = median_value\n",
    "\n",
    "print(median_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "c8affb39",
   "metadata": {},
   "outputs": [],
   "source": [
    "# For loop to calculate the median value of each column\n",
    "meadian_IL = []\n",
    "\n",
    "for column in columns:\n",
    "    meadian_IL[column] = IL_state_df[column].median()\n",
    "\n",
    "print(meadian_IL)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "0a09cb95",
   "metadata": {},
   "outputs": [],
   "source": [
    "# For loop to calculate the median value of each column\n",
    "meadian_IL = []\n",
    "\n",
    "for column in columns:\n",
    "    meadian_IL = IL_state_df[column].median()\n",
    "\n",
    "print(meadian_IL)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "0f8d98aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "median_dict = {}\n",
    "\n",
    "for column in column:\n",
    "    median_value = NY_state_df[column].median()\n",
    "    median_dict[column] = median_value\n",
    "\n",
    "print(median_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "841931b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "median_dict = {}\n",
    "\n",
    "for column in columns:\n",
    "    median_value = NY_state_df[column].median()\n",
    "    median_dict[column] = median_value\n",
    "\n",
    "print(median_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "b6fc945b",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "NY_state_df\n",
    "\n",
    "# Calculate and print the median for each column using a for loop\n",
    "for column in NY_state_df:\n",
    "    median_value = NY_state_df[column].median()\n",
    "    print(f\"Median of {column}: {median_value}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "9a1f5d61",
   "metadata": {},
   "outputs": [],
   "source": [
    "median_dict = {}\n",
    "\n",
    "for column in columns:\n",
    "    median_value = NY_state_df[column].median()\n",
    "    median_dict[column] = median_value\n",
    "\n",
    "print(median_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "3a6fc5df",
   "metadata": {},
   "outputs": [],
   "source": [
    "# For loop to calculate the median value of each column\n",
    "meadian_IL = []\n",
    "\n",
    "for column in IL_state_df.columns:\n",
    "    meadian_IL = IL_state_df[column].median()\n",
    "\n",
    "print(meadian_IL)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "22916946",
   "metadata": {},
   "outputs": [],
   "source": [
    "# For loop to calculate the median value of each column\n",
    "meadian_IL = []\n",
    "\n",
    "for column in IL_state_df.columns:\n",
    "    meadian_IL[column] = IL_state_df[column].median()\n",
    "\n",
    "print(meadian_IL)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "0d2d8f21",
   "metadata": {},
   "outputs": [],
   "source": [
    "NY_state_df\n",
    "\n",
    "# Use iloc to select all columns\n",
    "all_columns = NY_state_df.iloc[:, :]\n",
    "\n",
    "# Display the selected columns\n",
    "print(all_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "703af751",
   "metadata": {},
   "outputs": [],
   "source": [
    "NY_state_df\n",
    "\n",
    "\n",
    "# Get all column names as a list\n",
    "column_names_list = NY_state_df.tolist()\n",
    "\n",
    "# Display the column names list\n",
    "print(column_names_list)\n",
    "\n",
    "# Create a dictionary where keys are column names and values are column data\n",
    "columns_dict = {col: df[col] for col in df.columns}\n",
    "\n",
    "# Display the columns dictionary\n",
    "print(columns_dict)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "9c75d757",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Califonia Combined Median Rents\n",
    "columns_list = ['November 2010','December 2010','January 2011',\n",
    "'February 2011','March 2011','April 2011','May 2011','June 2011','July 2011',\n",
    "'August 2011','September 2011','October 2011','November 2011','December 2011',\n",
    "'January 2012','February 2012','March 2012','April 2012','May 2012','June 2012',\n",
    "'July 2012','August 2012','September 2012','October 2012','November 2012','December 2012',\n",
    "'January 2013','February 2013','March 2013','April 2013','May 2013','June 2013','July 2013',\n",
    "'August 2013','September 2013','October 2013','November 2013','December 2013','January 2014',\n",
    "'February 2014','March 2014','April 2014','May 2014','June 2014','July 2014','August 2014',\n",
    "'September 2014','October 2014','November 2014','December 2014','January 2015','February 2015',\n",
    "'March 2015','April 2015','May 2015','June 2015','July 2015','August 2015','September 2015','October 2015',\n",
    "'November 2015','December 2015','January 2016','February 2016','March 2016','April 2016','May 2016',\n",
    "'June 2016','July 2016','August 2016','September 2016','October 2016','November 2016','December 2016','January 2017']\n",
    "\n",
    "for i in columns_list\n",
    "\n",
    "CA_med_rent = np.median(CA_state_df[i])\n",
    "\n",
    "print(CA_med_rent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "28625024",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Califonia Combined Median Rents\n",
    "columns_list = ['November 2010','December 2010','January 2011',\n",
    "'February 2011','March 2011','April 2011','May 2011','June 2011','July 2011',\n",
    "'August 2011','September 2011','October 2011','November 2011','December 2011',\n",
    "'January 2012','February 2012','March 2012','April 2012','May 2012','June 2012',\n",
    "'July 2012','August 2012','September 2012','October 2012','November 2012','December 2012',\n",
    "'January 2013','February 2013','March 2013','April 2013','May 2013','June 2013','July 2013',\n",
    "'August 2013','September 2013','October 2013','November 2013','December 2013','January 2014',\n",
    "'February 2014','March 2014','April 2014','May 2014','June 2014','July 2014','August 2014',\n",
    "'September 2014','October 2014','November 2014','December 2014','January 2015','February 2015',\n",
    "'March 2015','April 2015','May 2015','June 2015','July 2015','August 2015','September 2015','October 2015',\n",
    "'November 2015','December 2015','January 2016','February 2016','March 2016','April 2016','May 2016',\n",
    "'June 2016','July 2016','August 2016','September 2016','October 2016','November 2016','December 2016','January 2017']\n",
    "\n",
    "for i in columns_list:\n",
    "\n",
    "CA_med_rent = np.median(CA_state_df[i])\n",
    "\n",
    "print(CA_med_rent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "d038580f",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Califonia Combined Median Rents\n",
    "columns_list = ['November 2010','December 2010','January 2011',\n",
    "'February 2011','March 2011','April 2011','May 2011','June 2011','July 2011',\n",
    "'August 2011','September 2011','October 2011','November 2011','December 2011',\n",
    "'January 2012','February 2012','March 2012','April 2012','May 2012','June 2012',\n",
    "'July 2012','August 2012','September 2012','October 2012','November 2012','December 2012',\n",
    "'January 2013','February 2013','March 2013','April 2013','May 2013','June 2013','July 2013',\n",
    "'August 2013','September 2013','October 2013','November 2013','December 2013','January 2014',\n",
    "'February 2014','March 2014','April 2014','May 2014','June 2014','July 2014','August 2014',\n",
    "'September 2014','October 2014','November 2014','December 2014','January 2015','February 2015',\n",
    "'March 2015','April 2015','May 2015','June 2015','July 2015','August 2015','September 2015','October 2015',\n",
    "'November 2015','December 2015','January 2016','February 2016','March 2016','April 2016','May 2016',\n",
    "'June 2016','July 2016','August 2016','September 2016','October 2016','November 2016','December 2016','January 2017']\n",
    "\n",
    "for i in columns_list:\n",
    "\n",
    "    CA_med_rent = np.median(CA_state_df[i])\n",
    "\n",
    "    print(CA_med_rent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "a9bb9f80",
   "metadata": {},
   "outputs": [],
   "source": [
    "columns_list = ['November 2010','December 2010','January 2011',\n",
    "'February 2011','March 2011','April 2011','May 2011','June 2011','July 2011',\n",
    "'August 2011','September 2011','October 2011','November 2011','December 2011',\n",
    "'January 2012','February 2012','March 2012','April 2012','May 2012','June 2012',\n",
    "'July 2012','August 2012','September 2012','October 2012','November 2012','December 2012',\n",
    "'January 2013','February 2013','March 2013','April 2013','May 2013','June 2013','July 2013',\n",
    "'August 2013','September 2013','October 2013','November 2013','December 2013','January 2014',\n",
    "'February 2014','March 2014','April 2014','May 2014','June 2014','July 2014','August 2014',\n",
    "'September 2014','October 2014','November 2014','December 2014','January 2015','February 2015',\n",
    "'March 2015','April 2015','May 2015','June 2015','July 2015','August 2015','September 2015','October 2015',\n",
    "'November 2015','December 2015','January 2016','February 2016','March 2016','April 2016','May 2016',\n",
    "'June 2016','July 2016','August 2016','September 2016','October 2016','November 2016','December 2016','January 2017']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "985e6e41",
   "metadata": {},
   "outputs": [],
   "source": [
    "# For loop to calculate the median value of each column\n",
    "for i in columns_list:\n",
    "\n",
    "    IL_med_rent = np.median(IL_state_df[i])\n",
    "\n",
    "    print(IL_med_rent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "14f1fe1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#TX\n",
    "#Finding the median for all TX rent prices per month/year\n",
    "for i in columns_list:\n",
    "\n",
    "    TX_med_rent = np.median(TX_state_df[i])\n",
    "\n",
    "    print(TX_med_rent)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "d56b6128",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Finding the median for all TX rent prices per month/year\n",
    "for i in columns_list:\n",
    "\n",
    "    TX_med_rent = np.median(TX_state_df[i])\n",
    "\n",
    "    print(TX_med_rent)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "3ebc4408",
   "metadata": {},
   "outputs": [],
   "source": [
    "#New York"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "e30eef41",
   "metadata": {},
   "outputs": [],
   "source": [
    "#New York\n",
    "\n",
    "for i in columns_list:\n",
    "\n",
    "    NY_med_rent = np.median(NY_state_df[i])\n",
    "\n",
    "    print(NY_med_rent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "e99a6a79",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Califonia Combined Median Rents\n",
    "CA_med_list = []\n",
    "\n",
    "for i in columns_list:\n",
    "\n",
    "    CA_med_rent = np.median(CA_state_df[i])\n",
    "\n",
    "    CA_med_list.append(CA_med_rent)\n",
    "\n",
    "print(CA_med_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "68772a68",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Finding the median for all TX rent prices per month/year\n",
    "for i in columns_list:\n",
    "\n",
    "    TX_med_rent = np.median(TX_state_df[i])\n",
    "\n",
    "    print(TX_med_rent)   \n",
    "\n",
    "TX_med_rent_df={TX_med_rent}\n",
    "print(TX_med_rent_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "9f17a079",
   "metadata": {},
   "outputs": [],
   "source": [
    "#New York Combined Median Rents\n",
    "NY_nov_2010_med_rent = NY_state_df[\"November 2010\"].median\n",
    "\n",
    "NY_nov_2010_med_rent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "285c454c",
   "metadata": {},
   "outputs": [],
   "source": [
    "CA_med_df = pd.Dataframe(CA_med_list, columns = columns_list) \n",
    "\n",
    "CA_med_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "428adb70",
   "metadata": {},
   "outputs": [],
   "source": [
    "CA_med_df = pd.DataFrame(CA_med_list, columns = columns_list) \n",
    "\n",
    "CA_med_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "8d643599",
   "metadata": {},
   "outputs": [],
   "source": [
    "CA_med_df = pd.DataFrame(CA_med_list) \n",
    "\n",
    "CA_med_df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "cbf5fb1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "IL_state_df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "272d6ee3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import scipy.stats as st\n",
    "from scipy.stats import linregress"
   ]
  }
 ],
 "metadata": {},
 "nbformat": 4,
 "nbformat_minor": 5
}
